/**
* \file framework.h
* \brief Заголовок библиотеки
* \date 14.03.2021
* \authors 
*/

#pragma once

/**
* \brief Структура, которая хранит информацию об изображении .
* \details Структура, хранящая в себе данные, при помощи которых описывается изображение.
*  Директива #pragmа pack используется для того, чтобы избежать неправильного считывания.
*/
#pragma pack(push, 1)
typedef struct 
{
	unsigned short	bfType;			///< Сигнатура bmp-файла 
	unsigned int 	bmpSize;		///< Размер всего bmp-файла в байтах
	unsigned short	res1;			///< Поле зарезервировано (должно быть равно 0)
	unsigned short	res2;			///< Поле зарезервировано (должно быть равно 0)
	unsigned int 	offBits;		///< Смещение (в байтах) массива пикселов от начала файла (= от начала структуры)

	unsigned int 	biSize;			///< Размер структуры BITMAPINFOHEADER в байтах.
	unsigned int 	width;			///< Ширина картинки в пикселах. 
	unsigned int 	height;			///< Высота картинки в пикселах.
	unsigned short	planes;			///< Количество цветовых плоскостей.
	unsigned short	bitCount;		///< Количество битов на 1 пиксел.
	unsigned int 	compression;	///< Всегда равно 0
	unsigned int 	sizeImage;		///< Размер массива пикселов в байтах
	unsigned int 	xPelsPerMeter;	///< Всегда равно 0
	unsigned int 	yPelsPerMeter;	///< Всегда равно 0
	unsigned int 	clrUsed;		///< Количество цветов в палитре.
	unsigned int 	clrImportant;	///< Количество цветов в палитре, необходимых для отображения изображения.
} header;

/**
* \brief Структура, определяющая цвет одного пикселя.
* \details Хранит 3 цветовых канала и 1 дополнительный. Массив
* данных структур может использоваться как палитра.
*/
typedef struct 
{
	unsigned char rgbBlue;		///< Синяя составляющая
	unsigned char rgbGreen;		///< Зеленая составляющая
	unsigned char rgbRed;		///< Красная составляющая
	unsigned char rgbReserved;	///< Доп. байт
} rgb;

/**
* \brief Структура, которая хранит данные о BMP-изображении.
* \details Хранит размеры, заголовок и информацию о пикселях изображения.
* \param w Ширина изображения.
* \param h Высота изображения.
*/
struct img
{
	img(int w, int h) 
	{
		x_size = w;
		y_size = h;
	}
	unsigned char* pix; ///< Пиксели, без дополнительных
	header meta; ///< Заголовок картинки
	int x_size; ///< Ширина изображения
	int y_size; ///< Высота изображения
	
};

/**
* \brief Поворот изображения на заданный угол.
* \details Преобразует развертку изображения так, что она будет повернута вправо по
* часовой стрелке на заданный угол.
* Функция создает новое изображение на основе исходного и записывает по переданному указателю.
* \param m Указатель на изображение, которое нужно повернуть.
* \param angle угол поворота.
*/
void rotate(img* m, int angle);

/**
* \brief Зеркальное отражение относительно одной из осей.
* \details Преобразует развертку изображения так, что при нормальном представлении, оно будет перевернута.
* Функция меняет местами пиксели исходного изображения.
* \param m Указатель на изображение для переворота.
* \param dir Направление переворота.
*/
void flip(img* m, char dir);

/**
* \brief Увеличение масштаба изображения.
* \details Увеличение количества пикселов по вертикали в v раз, по горизонтали в h раз. 
* \param m Указатель на изображение для масштабирования.
* \param v масштаб по вертикали.
* \param h масштаб по горизонтали.
*/
void upscale(img* m, int v, int h);

/**
* \brief Уменьшение масштаба изображения.
* \details Уменьшение количества пикселов по вертикали в v раз, по горизонтали в h раз, путём пропуска пикселей.
* Размеры изображения должны быть кратны v и h, иначе операция не выполнится.
* \param m Указатель на изображение для масштабирования.
* \param v масштаб по вертикали.
* \param h масштаб по горизонтали.
*/
void downscale(img* m, int v, int h);

/**
* \brief Изменение яркости изображения.
* \details Изменение яркости пикселов путем сдвига их значений на f разрядов.
* \param m Указатель на изображения для изменения яркости.
* \param f Значение изменения яркости.
*/
void bright(img* m, int f);

/**
* \brief Распознавание каналов.
* \details Преобразует строку с числами в массив чисел типа int.
* Размер массива - 100, пустые ячейки заполнены значениями 0.
* \param str Указатель на начало строки для распознавания.
* \return Указатель на начало массива с номерами каналов.
*/
int* nums(char* str);

/**
* \brief Считывание BMP-изображения.
* \details Считывает BMP-изображение с файла, проверяя его наличие при включенном режиме _DEBUG. Данные картинки считываются без доп.
* байтов.
* \param filename Указатель на начало строки, где написано название файла.
* \return Указатель на считанное изображение.
*/
img* scan_img(char* filename);

/**
* \brief Сохранение BMP-изображения.
* \details Сохраняет BMP-изображение. При сохранении данных изображения, добавляются необходимые доп. байты.
* Палитра изображения генерируется в этой функции и сразу сохраняется.
* \param m Указатель на изображение для сохранения.
* \param filename Указатель на начало строки, где написано название файла.
*/
void export_img(img* m, char* filename);